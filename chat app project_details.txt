Node.js is used for running our backend javascript code.
Node.js is an open-source server environment. Node.js runs on the V8 JavaScript Engine and executes JavaScript code outside a web browser.

This website uses 2 servers, golive server(client server) & node server/chat server(for 
listening events)

Socket.IO is used which is an event-driven library for real-time web applications. 
It enables real-time, bi-directional communication between web clients and servers. It consists of two parts: a client-side library that runs in the browser, and a server-side library for Node.js.
(WebSocket is a technology that enables two-way realtime communication between client and server. In contrast, Socket.IO is a library that provides an abstraction layer on top of WebSockets, making it easier to create realtime applications.)

HTTP Long Polling is a technique used to push information to a client as soon as possible on the server. As a result, the server does not have to wait for the client to send a request. In Long Polling, the server does not close the connection once it receives a request from the client.

// Questions 
why AES ?
=>Security: AES is widely regarded as a secure encryption algorithm. It has stood up well   against cryptographic attacks.
=>Performance: AES is a symmetric encryption algorithm, which means it uses the same key for both encryption and decryption. It is efficient and can encrypt and decrypt data quickly, making it suitable for real-time communication.
=>Compatibility: It is available in many programming languages and libraries, including CryptoJS
=> It is widely adopted by industries and government organizations.
=>The decision to use the AES algorithm in the example was based on its widespread adoption, security, performance, and compatibility.
=>Other algo are: - RSA(asymmetric encryption algorithm)( slower compared AES )
                  - Triple DES (symmetric) (AES has replaced 3DES due to its superior    performance and security.)

Features?
=>time stamp
=>delete button
=>encryption
=>chat History (local storage)
=>
